{
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "extends": [
    "standard",
    "standard-react"
  ],
  "plugins": [
    "babel",
    "import"
  ],
  "env": {
    "es6": true,
    "browser": true,
    "jest": true
  },
  "globals": {
    "__DEV__": false,
    "__PROD__": false,
    "__DEBUG__": false,
    "__COVERAGE__": false,
    "__BASENAME__": false,
    "API_URL": false,
    "MAPBOX_ACCESS_TOKEN": false,
    "MAPRIGHT_URL": false,
    "IMAGES_URL": false,
    "SUBSCRIBE_URL": false,
    "API_VERSION": false,
    "ZENDESK_URL": false,
    "YOUTUBE_TUTORIAL_LIST_URL": false,
    "ION_ACCESS_TOKEN": false,
    "Cesium": false,
    "heap": false,
    "AffineTransformation": false,
    "L": false,
    "PANO_SCRIPT_URL": false,
    "embedpano": false
  },
  "rules": {
    "semi": ["error", "always"],
    "max-len": [2, 120, 2],
    "generator-star-spacing": 1,
    "prefer-destructuring": ["error", {
      "array": true,
      "object": true
    }, {
      "enforceForRenamedProperties": false
    }],
    "no-multi-spaces": "error",
    "prefer-const": "error",
    "object-shorthand": "error",
    "array-callback-return": "error",
    "prefer-template": "error",
    "template-curly-spacing": "error",
    "space-before-function-paren": "error",
    "no-param-reassign": "error",
    "prefer-arrow-callback": "error",
    "arrow-spacing": "error",
    "arrow-parens": ["error", "as-needed"],
    "arrow-body-style": "error",
    "dot-notation": "error",
    "one-var": "error",
    "no-multi-assign": "error",
    "eqeqeq": "error",
    "no-mixed-operators": "error",
    "nonblock-statement-body-position": "error",
    "brace-style": "error",
    "no-else-return": "error",
    "space-before-blocks": "error",
    "keyword-spacing": "error",
    "space-infix-ops": "error",
    "padded-blocks": "error",
    "space-in-parens": "error",
    "object-curly-spacing": "error",
    "comma-style": "error",
    "comma-dangle": ["error", "always-multiline"],
    "standard/array-bracket-even-spacing": "off",
    "import/first": "error",
    "import/newline-after-import": "error",
    "react/jsx-closing-bracket-location": "error",
    "react/jsx-closing-tag-location": "error",
    "react/jsx-tag-spacing": "error",
    "react/jsx-curly-spacing": "error",
    "react/jsx-boolean-value": "error",
    "react/no-string-refs": "error",
    "react/jsx-wrap-multilines": "error",
    "react/self-closing-comp": "error",
    "react/jsx-no-bind": "error",
    "react/jsx-uses-vars": "error",
    "react/require-render-return": "error",
    "react/jsx-equals-spacing": ["error", "never"],
    "react/jsx-indent": ["error", 2],
    "react/prefer-stateless-function": ["error", { "ignorePureComponents": true }],
    "react/jsx-key": "off",
    "react/jsx-max-props-per-line": ["error", { "maximum": 1, "when": "multiline" }],
    "react/jsx-no-undef": "error",
    "react/no-did-update-set-state": "error",
    "react/no-will-update-set-state": "error",
    "react/no-direct-mutation-state": "error",
    "react/no-multi-comp": ["error", { "ignoreStateless": true }],
    "react/jsx-pascal-case": ["error", {
      "allowAllCaps": false,
      "ignore": []
    }],
    "react/jsx-handler-names": ["off", {
      "eventHandlerPrefix": "handle",
      "eventHandlerPropPrefix": "on"
    }],
    "react/sort-comp": ["error", {
      "order": [
        "static-methods",
        "instance-variables",
        "lifecycle",
        "/^on.+$/",
        "getters",
        "setters",
        "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
        "instance-methods",
        "everything-else",
        "rendering"
      ],
      "groups": {
        "lifecycle": [
          "displayName",
          "propTypes",
          "contextTypes",
          "childContextTypes",
          "mixins",
          "statics",
          "defaultProps",
          "constructor",
          "getDefaultProps",
          "getInitialState",
          "state",
          "getChildContext",
          "componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount"
        ],
        "rendering": [
          "/^render.+$/",
          "render"
        ]
      }
    }]
  }
}
